From ae0a9312c562985838fdd9845ef95fe61e8aa3de Mon Sep 17 00:00:00 2001
From: Jakub Hrozek <jakub.hrozek@posteo.se>
Date: Sun, 1 Apr 2018 10:57:22 +0200
Subject: [PATCH 2/2] Watch for uint32_t overflows

Always use a function that we know will catch out-of-range values for UIDs and
GIDs, which are currently unsigned 32-bit numbers everywhere, and which won't
produce a result that'll silently be truncated if we store the result in a
uid_t or gid_t.
---
 nslcd/common.c | 28 ++++++++++++++++------------
 nslcd/common.h | 27 +++------------------------
 2 files changed, 19 insertions(+), 36 deletions(-)

diff --git a/nslcd/common.c b/nslcd/common.c
index 60be7773d2c809f3177744ced0dd0ba90c86e820..de640b47806757e0bb2e704b3b79f1ecb18bbc45 100644
--- a/nslcd/common.c
+++ b/nslcd/common.c
@@ -338,19 +338,23 @@ unsigned long int binsid2id(const char *binsid)
          ((((unsigned long int)binsid[i + 3]) & 0xff) << 24);
 }
 
-#ifdef WANT_STRTOUI
-/* provide a strtoui() implementation, similar to strtoul() but returning
-   an range-checked unsigned int instead */
-unsigned int strtoui(const char *nptr, char **endptr, int base)
+/* provide a strtoid() implementation, similar to strtoul() but returning
+   an range-checked uint32_t instead */
+unsigned int strtoid(const char *nptr,char **endptr,int base)
 {
-  unsigned long val;
-  val = strtoul(nptr, endptr, base);
-  if (val > UINT_MAX)
+  long long val;
+  /* use the fact that long long is 64-bit, even on 32-bit systems */
+  val=strtoll(nptr,endptr,base);
+  if (val>UINT32_MAX)
   {
-    errno = ERANGE;
-    return UINT_MAX;
+    errno=ERANGE;
+    return UINT32_MAX;
   }
-  /* If errno was set by strtoul, we'll pass it back as-is */
-  return (unsigned int)val;
+  else if (val < 0)
+  {
+    errno=EINVAL;
+    return UINT32_MAX;
+  }
+  /* If errno was set, we'll pass it back as-is */
+  return (uint32_t)val;
 }
-#endif /* WANT_STRTOUI */
diff --git a/nslcd/common.h b/nslcd/common.h
index 26fcf48ae2a6dc50bc97fab238ecc9a1879342ce..97d386eaf1f6881182729c5d8e46ce30d2d28eba 100644
--- a/nslcd/common.h
+++ b/nslcd/common.h
@@ -161,31 +161,10 @@ void invalidator_do(enum ldap_map_selector map);
 #define BUFLEN_HOSTNAME     256  /* host names or FQDN (and safe version) */
 #define BUFLEN_MESSAGE     1024  /* message strings */
 
-/* provide strtouid() function alias */
-#if SIZEOF_UID_T == SIZEOF_UNSIGNED_LONG_INT
-#define strtouid (uid_t)strtoul
-#elif SIZEOF_UID_T == SIZEOF_UNSIGNED_LONG_LONG_INT
-#define strtouid (uid_t)strtoull
-#elif SIZEOF_UID_T == SIZEOF_UNSIGNED_INT
-#define WANT_STRTOUI 1
-#define strtouid (uid_t)strtoui
-#else
-#error unable to find implementation for strtouid()
-#endif
 
-/* provide strtogid() function alias */
-#if SIZEOF_GID_T == SIZEOF_UNSIGNED_LONG_INT
-#define strtogid (gid_t)strtoul
-#elif SIZEOF_GID_T == SIZEOF_UNSIGNED_LONG_LONG_INT
-#define strtogid (gid_t)strtoull
-#elif SIZEOF_GID_T == SIZEOF_UNSIGNED_INT
-#ifndef WANT_STRTOUI
-#define WANT_STRTOUI 1
-#endif
-#define strtogid (gid_t)strtoui
-#else
-#error unable to find implementation for strtogid()
-#endif
+uint32_t strtoid(const char *nptr,char **endptr,int base);
+#define strtouid (uid_t)strtoid
+#define strtogid (gid_t)strtoid
 
 #ifdef WANT_STRTOUI
 /* provide a strtoui() if it is needed */
-- 
2.14.3

